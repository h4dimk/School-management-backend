import teacherModel from "../models/teacherModel";
import { ITeacherRepository } from "../../../useCases/interface/repository/teacherRepository";
import { ITeacher } from "../../../entities/teacherEntity";
import { IAnnouncement } from "../../../entities/announcementEntity";
import { IAttendence } from "../../../entities/attendenceEntity";
import { ILeaveTeacher } from "../../../entities/leaveTeacherEntity";
import Leave from "../../../@types/enum/leave";
import { ILeaveStudent } from "../../../entities/leaveStudentEntity";
import { ITimetable } from "../../../entities/timeTableEntity";
import { IMcq } from "../../../entities/mcqEntity";
import { IAssignment } from "../../../entities/assignmentEntity";
import { IMessage } from "../../../entities/chatEntity";
import { IRemark } from "../../../entities/remarksEntity";
import { IBatch } from "../../../entities/batchEntity";
import { IMcqSubmission } from "../../../entities/mcqSubmits";
export declare class TeacherRepository implements ITeacherRepository {
    private teacherModels;
    constructor(teacherModels: typeof teacherModel);
    findByEmail(email: string): Promise<ITeacher | null>;
    getTeacherById(teacherId: string): Promise<ITeacher | null>;
    updateTeacher(teacherId: string, teacher: Partial<ITeacher>): Promise<ITeacher>;
    getAnnouncements(): Promise<IAnnouncement[]>;
    createAttendence(attendence: IAttendence): Promise<IAttendence>;
    getAttendance(batchId: string): Promise<IAttendence[]>;
    createLeave(leaveData: ILeaveTeacher): Promise<ILeaveTeacher>;
    findLeaves(teacherId: string): Promise<ILeaveTeacher[]>;
    removeLeave(leaveId: string): Promise<void>;
    getStudentsLeaves(batch: string): Promise<ILeaveStudent[]>;
    updateLeaveStatus(leaveId: string, status: Leave): Promise<void>;
    getTimetables(teacherId: string): Promise<ITimetable[]>;
    createMcqs(mcqDetails: IMcq): Promise<IMcq>;
    getMcqsByTeacher(teacherId: string): Promise<IMcq[]>;
    getMcqsByBatch(batchId: string): Promise<IMcq[]>;
    findAssignments(batchId: string): Promise<IAssignment[]>;
    addMessage(messageData: IMessage): Promise<IMessage>;
    findChats(batchId: string): Promise<IMessage[]>;
    createRemarks(remark: IRemark): Promise<IRemark>;
    findRemarks(teacherId: string): Promise<IRemark[]>;
    findBatches(): Promise<IBatch[]>;
    findBatchRanks(batchId: string): Promise<IMcqSubmission[]>;
}
