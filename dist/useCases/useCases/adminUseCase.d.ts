import { IAdminRepository } from "../interface/repository/adminRepository";
import { IAdminUseCase } from "../interface/useCase/adminUseCase";
import { IAdmin } from "../../entities/adminEntity";
import { ITeacher } from "../../entities/teacherEntity";
import { IStudent } from "../../entities/studentEntity";
import { ICourse } from "../../entities/courseEntity";
import IJwtService from "../interface/services/jwtService";
import { ISendEmail } from "../interface/services/sendMail";
import { Next } from "../../frameworks/types/serverPackageTypes";
import { IHashpassword } from "../interface/services/hashPassword";
import { IBatch } from "../../entities/batchEntity";
import { IAnnouncement } from "../../entities/announcementEntity";
import { ILeaveTeacher } from "../../entities/leaveTeacherEntity";
import { ILeaveStudent } from "../../entities/leaveStudentEntity";
import Leave from "../../@types/enum/leave";
import { ITimetable } from "../../entities/timeTableEntity";
export declare class AdminUseCase implements IAdminUseCase {
    private readonly adminRepository;
    private readonly jwt;
    private readonly sendMail;
    private readonly hashPassword;
    constructor(adminRepository: IAdminRepository, jwt: IJwtService, sendMail: ISendEmail, hashPassword: IHashpassword);
    login(email: string, password: string, next: Next): Promise<{
        admin: IAdmin;
        token: string;
    } | void>;
    addTeacher(teacher: ITeacher, next: Next): Promise<void>;
    getTeachers(next: Next): Promise<ITeacher[]>;
    blockTeacher(teacherId: string, next: Next): Promise<boolean>;
    removeTeacher(teacherId: string, next: Next): Promise<void>;
    addStudent(student: IStudent, next: Next): Promise<void>;
    getStudents(next: Next): Promise<IStudent[]>;
    blockStudent(studentId: string, next: Next): Promise<boolean>;
    removeStudent(studentId: string, next: Next): Promise<void>;
    addCourse(course: ICourse, next: Next): Promise<void>;
    getCourses(next: Next): Promise<ICourse[]>;
    removeCourse(courseId: string, next: Next): Promise<void>;
    editCourse(courseId: string, updates: Partial<ICourse>): Promise<ICourse>;
    getAdminProfile(adminId: string): Promise<IAdmin | null>;
    updateAdminProfile(adminId: string, updates: Partial<IAdmin>): Promise<IAdmin>;
    addBatch(batch: IBatch, next: Next): Promise<void>;
    getBatches(next: Next): Promise<IBatch[]>;
    removeBatch(batchId: string, next: Next): Promise<void>;
    addAnnouncement(announcementData: IAnnouncement, next: Next): Promise<void>;
    getAnnouncements(next: Next): Promise<IAnnouncement[]>;
    removeAnnouncemet(announcementId: string, next: Next): Promise<void>;
    getTeachersLeaves(next: Next): Promise<ILeaveTeacher[]>;
    getStudentsLeaves(next: Next): Promise<ILeaveStudent[]>;
    updateTeacherLeaveStatus(leaveId: string, status: Leave, next: Next): Promise<void>;
    updateStudentsLeaveStatus(leaveId: string, status: Leave, next: Next): Promise<void>;
    addTimetable(timetable: ITimetable, next: Next): Promise<void>;
    removeTimetable(timetableId: string, next: Next): Promise<void>;
    getTimetables(next: Next): Promise<ITimetable[]>;
    validateTimetable(date: Date, period: number, batch: string, teacher: string): Promise<string | undefined>;
    getTodaysAttendence(next: Next): Promise<{
        present: string[];
        absent: string[];
    }>;
}
